import telebot 
from telebot import types
import os
import time
import webbrowser
import requests
import platform
import ctypes
import mouse
import PIL.ImageGrab
import json
from PIL import Image, ImageDraw
import tkinter as tk
from psutil import process_iter
from win10toast import ToastNotifier
import psutil
import pyautogui
import numpy as np
import threading
import string
import random
import mouse
from methods_windowstools import *

config_file = 'config.json'
my_id = None
bot_token = None
is_recording = False
bot = None
curs_range = 50
password_to_change_account = "your_password"

def id_user_tg():
    global my_id, bot_token
    webbrowser.open('https://web.telegram.org/k/#@getmyid_bot')
    
    window = tk.Tk()
    window.title('WindowsToolsBot')
    window.geometry('500x400')
    window.resizable(width=False, height=False)

    label = tk.Label(text='–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π Telegram id:', bg='White', fg='Black', font='TNR 14')
    label.place(x=50, y=25)

    label1 = tk.Label(text='–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ Telegram:', bg='White', fg='Black', font='TNR 14')
    label1.place(x=50, y=200)

    frame1 = tk.Frame(window, width=400, height=400)
    frame1.place(x=50, y=250)
    ent1 = tk.Entry(frame1, font='TNR 10', bg='white', fg='black', width=90)
    ent1.place(x=0, y=0)

    frame = tk.Frame(window, width=200, height=100)
    ent_var = tk.StringVar()
    ent = tk.Entry(frame, textvariable=ent_var, font='TNR 14', bg='white', fg='black', width=15)

    btn = tk.Button(frame1, text='–í–≤–æ–¥', font='TNR 14', bg='white', fg='black', command=lambda: test(ent_var.get(), ent1.get(), window))
    
    frame.place(x=25, y=65)
    ent.place(x=25, y=0)
    btn.place(x=150, y=50)
        
    window.bind('<Return>', lambda event: test(ent_var.get(), ent1.get(), window))
    window.mainloop()

def test(my_id_input, bot_token_input, window):
    global my_id, bot_token
    my_id = my_id_input
    bot_token = bot_token_input
    save_my_id()  
    window.destroy()  
    initialize_bot()  

def save_my_id():
    with open(config_file, 'w') as f:
        json.dump({"my_id": my_id, "bot_token": bot_token}, f)  

def load_my_id():
    global my_id, bot_token
    if os.path.exists(config_file):
        with open(config_file, 'r') as f:
            config = json.load(f)
            my_id = config.get("my_id")
            bot_token = config.get("bot_token")
    else:
        id_user_tg()  

def initialize_bot():
    global bot
    bot = telebot.TeleBot(bot_token)  
    
load_my_id()

if my_id is None or bot_token is None:
    id_user_tg()
else:
    initialize_bot()  



@bot.message_handler(commands=['start'])
def send_welcome(message):
    if str(message.from_user.id) == my_id:
        bot.send_photo(my_id, "https://i.imgur.com/qrK0FaT.png", caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WindowsToolBot! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.")
        send_main_menu(message)
    else:
        bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")

@bot.message_handler(commands=['reg_new_account'])
def reg_new_account(message):
    global new_id
    if message.text[17:] == password_to_change_account:
        new_id = message.from_user.id
        with open(config_file, 'w') as f:
            json.dump({"my_id": new_id, "bot_token": bot_token}, f)
        load_my_id()
        bot.send_message(message.from_user.id, "–ü–∞—Ä–æ–ª—å –í–µ—Ä–Ω—ã–π, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
    else:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å.")


def send_first_msg(id):
    bot.send_photo(my_id, "https://i.imgur.com/qrK0FaT.png", caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WindowsToolBot! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.")
    send_main_menu(id)

send_first_msg(my_id)


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    global curs_range
    funcs = {
    #"callback.data":command
    "screenshot": screenshot,
    "mouse_control": callback_handle_mouse_control,
    "files_and_processes": handle_files_and_processes,
    "additional_options": handle_additional_options,
    "send_notification": handler_send_notify,
    "record_screen": start_recording,
    "insert_text": handle_insert_text,
    "professionals": handle_professionals,
    "emulate_keys": handle_emulate_keys,
    "block_input": handle_block_input,
    "unblock_input": handle_unblock_input,
    "send_main_menu": send_main_menu,
}
    
    if int(call.from_user.id) == int(my_id):
        if call.data in funcs:
            funcs[call.data](call)
        elif call.data == "info":
            bot.send_message(my_id, info_msg, parse_mode="markdown")
            send_main_menu(call)
        elif call.data == "record_stop":
            stop_recording(call)
            send_main_menu(call.message)
        elif call.data == "unblock_input":
            handle_unblock_input(call)
        elif call.data == "start_process":
            bot.send_message(my_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É")
            bot.register_next_step_handler(call.message, start_process)
        elif call.data == "kill_process":
            bot.send_message(my_id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞")
            bot.register_next_step_handler(call.message, kill_process)
        elif call.data == "download_file":
            bot.send_message(my_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å –ü–ö.")
            bot.register_next_step_handler(call.message, downfile_process)
        elif call.data == "upload_file":
            bot.send_message(my_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª –±—É–¥–µ—Ç –≤ –ø–∞–ø–∫–µ —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π.")
            bot.register_next_step_handler(call.message, uploadfile_process)
        elif call.data == "upload_url":
            bot.send_message(my_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å –Ω–∞ –ü–ö")
            bot.register_next_step_handler(call.message, uploadurl_process)
        elif call.data == "open_url":
            bot.send_message(my_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –ø–æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏")
            bot.register_next_step_handler(call.message, web_process)
        elif call.data == "start_command":
            bot.send_message(my_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É")
            bot.register_next_step_handler(call.message, cmd_process) 
        elif call.data == "turn_off_pc":
            bot.send_message(my_id, "–ü–ö –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è")
            os.system("shutdown /s /t 1")
        elif call.data == "restart_pc":
            bot.send_message(my_id, "–ü–ö –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è")
            os.system("shutdown /r /t 1")
        elif call.data == "info_pc":
            system_info()
        elif call.data == "mouse_up":
            currentMouseX, currentMouseY = mouse.get_position()
            mouse.move(currentMouseX, currentMouseY - curs_range)
            screen_process(call)

        elif call.data == "mouse_down":
            currentMouseX, currentMouseY = mouse.get_position()
            mouse.move(currentMouseX, currentMouseY + curs_range)
            screen_process(call)

        elif call.data == "mouse_left":
            currentMouseX, currentMouseY = mouse.get_position()
            mouse.move(currentMouseX - curs_range, currentMouseY)
            screen_process(call)

        elif call.data == "mouse_right":
            currentMouseX, currentMouseY = mouse.get_position()
            mouse.move(currentMouseX + curs_range, currentMouseY)
            screen_process(call)

        elif call.data == "mouse_ok":
            mouse.click()
            screen_process(call)

        elif call.data == "set_curs_range":
            bot.send_chat_action(my_id, 'typing')
            bot.send_message(my_id, "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑–º–∞—Ö–∞ –∫—É—Ä—Å–æ—Ä–∞")
            bot.register_next_step_handler(call.message, set_curs_range)
        elif call.data == "processes":
            bot.send_chat_action(my_id, 'typing')
            processes_names = {process.name() for process in process_iter()}
            elements_to_remove = {
                'System', 
                'System Idle Process', 
                'taskhostw.exe', 
                'svchost.exe', 
                'csrss.exe', 
                'RuntimeBroker.exe', 
                'Registry', 
                'services.exe', 
                'wininit.exe', 
                'winlogon.exe', 
                'dllhost.exe', 
                'powershell.exe', 
                'conhost.exe', 
                'explorer.exe', 
                'sihost.exe'
            }
            
            for element in elements_to_remove:
                processes_names.discard(element)
            
            sorted_processes = sorted(processes_names)
            numbered_processes = '\n'.join(f"{i + 1}. {process}" for i, process in enumerate(sorted_processes))
 
            bot.send_message(my_id, numbered_processes)
                
            bot.send_message(my_id, '–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –ø—Ä–æ—Ü–µ—Å—Å? (–¥–∞/–Ω–µ—Ç)')
            send_main_menu()

def handle_professionals(call):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
            types.InlineKeyboardButton(text="üîÑ–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º", callback_data="safe_mode"),
            types.InlineKeyboardButton(text="üîÑ–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π", callback_data="safe_mode_cmd"),
            types.InlineKeyboardButton(text="üß¨–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É", callback_data="start_diagnostic"),
            types.InlineKeyboardButton(text="üîå–í–∫–ª—é—á–∏—Ç—å –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä", callback_data="turnon_brand"),
            types.InlineKeyboardButton(text="üö´–í—ã–∫–ª—é—á–∏—Ç—å –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä", callback_data="turnoff_brand"),
            types.InlineKeyboardButton(text="üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüè†", callback_data="send_main_menu"))
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=keyboard)
                 
def handle_block_input(call):
    block_input()

@bot.callback_query_handler(func=lambda call: call.data == "emulate_keys")
def handle_emulate_keys(call):
    bot.send_message(my_id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞–≤–∏—à—É –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏")
    bot.register_next_step_handler(call.message, emulate_keypress)

@bot.callback_query_handler(func=lambda call: call.data == "unblock_input")
def handle_unblock_input(call):
    bot.send_message(my_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å —ç–∫—Ä–∞–Ω–∞")
    bot.register_next_step_handler(call.message, check_code)
    check_code(call.message)

def callback_handle_mouse_control(call):
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    keyboard.add(
        types.InlineKeyboardButton(text="¬†", callback_data="null"),
        types.InlineKeyboardButton(text="‚¨ÜÔ∏è", callback_data="mouse_up"),
        types.InlineKeyboardButton(text="¬†", callback_data="null"),
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="mouse_left"),
        types.InlineKeyboardButton(text="üÜó", callback_data="mouse_ok"),
        types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data="mouse_right"),
        types.InlineKeyboardButton(text="¬†", callback_data="null"),
        types.InlineKeyboardButton(text="‚¨áÔ∏è", callback_data="mouse_down"),
        types.InlineKeyboardButton(text="–£–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–∞—Ö –∫—É—Ä—Å–æ—Ä–∞", callback_data="set_curs_range"),
        types.InlineKeyboardButton(text="üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüè†", callback_data="send_main_menu")
    )
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=keyboard)

def handle_files_and_processes(call):
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    keyboard.add(
        types.InlineKeyboardButton(text="‚úîÔ∏è–ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="start_process"),
        types.InlineKeyboardButton(text="‚ùå–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å", callback_data="kill_process"),
        types.InlineKeyboardButton(text="‚¨áÔ∏è–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data="download_file"),
        types.InlineKeyboardButton(text="‚¨ÜÔ∏è–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", callback_data="upload_file"),
        types.InlineKeyboardButton(text="üîó–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ", callback_data="upload_url"),
        types.InlineKeyboardButton(text="üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüè†", callback_data="send_main_menu")
    )
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == "send_notification")
def handler_send_notify(call):
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(call.message, get_notification_text)

@bot.callback_query_handler(func=lambda call: call.data == "insert_text")
def handle_insert_text(call):
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏:")
    bot.register_next_step_handler(call.message, paste_text)

def get_notification_text(message):
    bot.send_chat_action(my_id, 'typing')
    notification_text = message.text.strip()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –ü–ö
    toaster = ToastNotifier()
    toaster.show_toast(
        "WindowsToolBot",  
        notification_text,        
        duration=10     
    )
    
    bot.send_message(my_id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º: \"{notification_text}\" –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    send_main_menu('call')

def handle_additional_options(call):
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    keyboard.add(
        types.InlineKeyboardButton(text="üîó–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ", callback_data="open_url"),
        types.InlineKeyboardButton(text="‚úÖ–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="start_command"),
        types.InlineKeyboardButton(text="‚õîÔ∏è–í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä", callback_data="turn_off_pc"),
        types.InlineKeyboardButton(text="‚ôªÔ∏è–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä", callback_data="restart_pc"),
        types.InlineKeyboardButton(text="ÔøΩ–û –∫–æ–º–ø—å—é—Ç–µ—Ä–µ", callback_data="info_pc"),
        types.InlineKeyboardButton(text="–ü—Ä–æ—Ü–µ—Å—Å—ã", callback_data="processes"),
        types.InlineKeyboardButton(text="üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüè†", callback_data="send_main_menu"))
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=keyboard)


info_msg = '''
*–û –∫–æ–º–∞–Ω–¥–∞—Ö*
_üì∑–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç_ - —Å–æ–∑–¥–∞–µ—Ç —Å–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ –≤–º–µ—Å—Ç–µ —Å —É–∫–∞–∑–∞—Ç–µ–ª–µ–º –º—ã—à–∏. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞.
_üñ±–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à–∫–æ–π_ - –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–æ–º, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–ª–∏–∫–∏.
_üìÇ–§–∞–π–ª—ã –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã_ - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏ –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –∏ –∑–∞–≤–µ—Ä—à–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã, –∞ —Ç–∞–∫–∂–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª–∞–º–∏.
_‚ùáÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ_ - –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Ä–∞–∑–¥–µ–ª —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏, —Ç–∞–∫–∏–º–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π.
_üì©–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è_ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –ü–ö –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
_‚è™–ù–∞–∑–∞–¥‚è™_ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –ø–æ–∑–≤–æ–ª—è—è –≤–∞–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤—ã–±–æ—Ä—É.
_üîó–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ_ - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É. –í–∞–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å "http://" –∏–ª–∏ "https://" –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ, –∞ –Ω–µ –≤ Internet Explorer.
_‚úÖ–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É_ - –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –ª—é–±—É—é —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É, –ø–æ–∑–≤–æ–ª—è—è –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–æ–π —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å.
_‚õîÔ∏è–í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä_ - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ.
_‚úîÔ∏è–ó–∞–ø—É—Å—Ç–∏—Ç—å_ - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ª—é–±—ã–µ —Ñ–∞–π–ª—ã (–≤ —Ç–æ–º —á–∏—Å–ª–µ –∏ .exe), –ø–æ–∑–≤–æ–ª—è—è –≤–∞–º –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã.
_‚¨áÔ∏è–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª_ - –∑–∞–≥—Ä—É–∂–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –≤–∞—à–µ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, –ø–æ–∑–≤–æ–ª—è—è –≤–∞–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ñ–∞–π–ª—ã.
_‚¨ÜÔ∏è–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª_ - –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ –≤–∞—à –∫–æ–º–ø—å—é—Ç–µ—Ä, –ø–æ–∑–≤–æ–ª—è—è –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å —Ñ–∞–π–ª—ã –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
_üîó–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ_ - –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ –≤–∞—à –∫–æ–º–ø—å—é—Ç–µ—Ä –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ, –ø–æ–∑–≤–æ–ª—è—è –≤–∞–º —Å–∫–∞—á–∏–≤–∞—Ç—å —Ñ–∞–π–ª—ã –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.
'''

MessageBox = ctypes.windll.user32.MessageBoxW
if os.path.exists("msg.pt"):
    pass
else:
    bot.send_message(my_id, "–°–ø–∞—Å–∏–±–æ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –ü–û!\n–°–æ–≤–µ—Ç—É—é –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–µ–Ω—é \"‚ùóÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", parse_mode="markdown")
    MessageBox(None, f'–ù–∞ –≤–∞—à–µ–º –ü–ö –∑–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ WindowsToolBot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º\n–î–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–∑–æ–≤—ã–º', '!–í–ù–ò–ú–ê–ù–ò–ï!', 0)
    f = open('msg.pt', 'tw', encoding='utf-8')
    f.close

bot.send_message(my_id, "WindowsToolsBot –∑–∞–ø—É—â–µ–Ω")

def emulate_keypress(message):
    bot.send_chat_action(my_id, 'typing')
    keys_to_press = message.text.strip().split()  

    try:
        for key in keys_to_press:
            pyautogui.press(key)  
            time.sleep(0.1)  
        bot.send_message(my_id, f"–≠–º—É–ª–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à: {', '.join(keys_to_press)}")
    except Exception as e:
        bot.send_message(my_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–º—É–ª—è—Ü–∏–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à: {str(e)}")
    
    send_main_menu(message)  


def block_input():
    global unlock_code, overlay
    bot.send_message(my_id, "–í–≤–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    unlock_code = generate_random_code(random.randint(5, 10))  
    ctypes.windll.user32.BlockInput(True)  

    
    overlay = tk.Tk()
    overlay.attributes('-fullscreen', True)  
    overlay.wm_attributes("-topmost", 1)
    overlay.configure(bg='black')  

    
    label = tk.Label(overlay, text=f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:\n{unlock_code}", 
                     bg='black', fg='white', font='Helvetica 24 bold')
    label.pack(expand=True)
    overlay.mainloop()

def check_code(message):
    if message.text == unlock_code:
        ctypes.windll.user32.BlockInput(False)
        overlay.destroy()
     

def system_info():
    bot.send_chat_action(my_id, 'typing')
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
        cpu_usage = psutil.cpu_percent(interval=1)
        memory_info = psutil.virtual_memory()
        disk_info = psutil.disk_usage('/')

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        info = f"""
        *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU:* {cpu_usage}%
        *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:* {memory_info.percent}%
        *–û–±—ä–µ–º –ø–∞–º—è—Ç–∏:* {memory_info.total / (1024 ** 3):.2f} –ì–ë
        *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞:* {disk_info.percent}%
        *–û–±—ä–µ–º –¥–∏—Å–∫–∞:* {disk_info.total / (1024 ** 3):.2f} –ì–ë
        """
        bot.send_message(my_id, info, parse_mode="markdown")
    except Exception as e:
        bot.send_message(my_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: {str(e)}")

def screen_process(message):
    try:
        currentMouseX, currentMouseY = mouse.get_position()
        img = PIL.ImageGrab.grab()
        img.save("screen.png", "png")
        img = Image.open("screen.png")
        draw = ImageDraw.Draw(img)
        draw.polygon((currentMouseX, currentMouseY, currentMouseX, currentMouseY + 15, currentMouseX + 10, currentMouseY + 10), fill="white", outline="black")
        img.save("screen_with_mouse.png", "PNG")
        bot.send_photo(my_id, open("screen_with_mouse.png", "rb"))
        os.remove("screen.png")
        os.remove("screen_with_mouse.png")
    except:
        pass
def mousecurs_settings(message):
    bot.send_chat_action(my_id, 'typing')
    if is_digit(message.text) == True:
        User.curs = int(message.text)
        bot.send_message(my_id, f"–†–∞–∑–º–∞—Ö –∫—É—Ä—Å–æ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {str(User.curs)}px")
    else:
        bot.send_message(my_id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")
        bot.register_next_step_handler(message, mousecurs_settings)

def uploadurl_2process(message):
    bot.send_chat_action(my_id, 'typing')
    try:
        User.fin = message.text
        obj = SmartDL(User.urldown, User.fin, progress_bar=False)
        obj.start()
        bot.send_message(my_id, f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ –ø—É—Ç–∏ \"{User .fin}\"")
        
    except:
        bot.send_message(my_id, "–£–∫–∞–∑–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏–ª–∏ –ø—É—Ç—å")  

def kill_process_by_number(message):
    bot.send_chat_action(my_id, 'typing')
    process_number = message.text.strip() 
        
    if process_number.isdigit():
        process_number = int(process_number) - 1  
        processes_names = {process.name() for process in process_iter()}
        elements_to_remove = {
            'System', 
            'System Idle Process', 
            'taskhostw.exe', 
            'svchost.exe', 
            'csrss.exe', 
            'RuntimeBroker.exe', 
            'Registry', 
            'services.exe', 
            'wininit.exe', 
            'winlogon.exe', 
            'dllhost.exe', 
            'powershell.exe', 
            'conhost.exe', 
            'explorer.exe', 
            'sihost.exe'
        }
            
        # –£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏–∑ —Å–ø–∏—Å–∫–∞
        for element in elements_to_remove:
            processes_names.discard(element)
            
        sorted_processes = sorted(processes_names)
            
        if 0 <= process_number < len(sorted_processes):
            process_to_kill = sorted_processes[process_number]
            try:
                # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ –∏–º–µ–Ω–∏
                for proc in process_iter():
                    if proc.name() == process_to_kill:
                        proc.terminate()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                        bot.send_message(my_id, f"–ü—Ä–æ—Ü–µ—Å—Å '{process_to_kill}' –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω.")
                        return
            except Exception as e:
                bot.send_message(my_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {str(e)}")
        else:
            bot.send_message(my_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            bot.register_next_step_handler(message, kill_process_by_number)  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
    else:
        bot.send_message(my_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞.")
        bot.register_next_step_handler(message, kill_process_by_number)  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å

while True:
    try:
        bot.polling(none_stop=True, interval=0, timeout=20)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        time.sleep(2)